//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ALPHA.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_ALPHAEntities : DbContext
    {
        public DB_ALPHAEntities()
            : base("name=DB_ALPHAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblDocuments> tblDocuments { get; set; }
        public virtual DbSet<tblLogin> tblLogin { get; set; }
        public virtual DbSet<tblPerson> tblPerson { get; set; }
        public virtual DbSet<tblRadication> tblRadication { get; set; }
        public virtual DbSet<tblRoles> tblRoles { get; set; }
    
        public virtual ObjectResult<SP_GetDocument_Result> SP_GetDocument(string user)
        {
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDocument_Result>("SP_GetDocument", userParameter);
        }
    
        public virtual int SP_InsertDocument(Nullable<int> idSender, Nullable<int> idReceiver, Nullable<bool> type, string name, string realName, byte[] fileExt, ObjectParameter result)
        {
            var idSenderParameter = idSender.HasValue ?
                new ObjectParameter("IdSender", idSender) :
                new ObjectParameter("IdSender", typeof(int));
    
            var idReceiverParameter = idReceiver.HasValue ?
                new ObjectParameter("idReceiver", idReceiver) :
                new ObjectParameter("idReceiver", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var realNameParameter = realName != null ?
                new ObjectParameter("realName", realName) :
                new ObjectParameter("realName", typeof(string));
    
            var fileExtParameter = fileExt != null ?
                new ObjectParameter("fileExt", fileExt) :
                new ObjectParameter("fileExt", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertDocument", idSenderParameter, idReceiverParameter, typeParameter, nameParameter, realNameParameter, fileExtParameter, result);
        }
    
        public virtual int SP_InsertPerson(string name, string lastName, string mail, Nullable<int> idRol, string user, string pwd, string result)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("idRol", idRol) :
                new ObjectParameter("idRol", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            var resultParameter = result != null ?
                new ObjectParameter("result", result) :
                new ObjectParameter("result", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertPerson", nameParameter, lastNameParameter, mailParameter, idRolParameter, userParameter, pwdParameter, resultParameter);
        }
    
        public virtual int SP_Login(string user, string pwd, ObjectParameter result)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Login", userParameter, pwdParameter, result);
        }
    
        public virtual ObjectResult<SP_SenderExist_Result> SP_SenderExist(Nullable<int> idSender, ObjectParameter result)
        {
            var idSenderParameter = idSender.HasValue ?
                new ObjectParameter("idSender", idSender) :
                new ObjectParameter("idSender", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SenderExist_Result>("SP_SenderExist", idSenderParameter, result);
        }
    
        public virtual ObjectResult<SP_GetRoles_Result> SP_GetRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetRoles_Result>("SP_GetRoles");
        }
    }
}
